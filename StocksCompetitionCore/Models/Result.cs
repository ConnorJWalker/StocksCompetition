namespace StocksCompetitionCore.Models;

/// <summary>
/// Object containing success and failure values for methods that can fail
/// </summary>
/// <typeparam name="T">The type of the value generated in a successful result</typeparam>
public record Result<T>
{
    /// <summary>
    /// True if operation was successful
    /// </summary>
    public bool Success { get; private set; }
    
    /// <summary>
    /// Value generated by called method on successful completion
    /// </summary>
    public T? Content { get; private set; }

    /// <summary>
    /// Text representation of why the operation was not successful
    /// </summary>
    public string ErrorMessage { get; private set; } = string.Empty;

    /// <summary>
    /// Http status code value for the reason the operation was not successful
    /// </summary>
    public int ErrorCode { get; private set; }
    
    /// <summary>
    /// Generates success Result object
    /// </summary>
    /// <param name="content">Value generated by called method</param>
    /// <returns>Result object containing the successfully generated value with failed values remaining default initialised</returns>
    public static Result<T> FromSuccess(T content) 
        => new() { Success = true, Content = content, ErrorMessage = string.Empty, ErrorCode = 0 };

    /// <summary>
    /// Generates failure Result object
    /// </summary>
    /// <param name="errorCode">Http response code for failure reason</param>
    /// <param name="errorMessage">Description of failure reason</param>
    /// <returns>Result object containing the failure reasons with the Content field remaining null</returns>
    public static Result<T> FromFailed(int errorCode, string errorMessage) 
        => new() { Success = false, ErrorCode = errorCode, ErrorMessage = errorMessage };
}